#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

--How many many unique orders were placed in January? In other words, how many distinct order ids do we have?
SELECT count (distinct orderID)
FROM BIT_DB.JanSales
WHERE length (orderid) = 6 AND orderid <> 'Order ID';

--How many of those orders were for an iPhone?
SELECT Product, count (distinct orderID)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length (orderid) = 6 AND orderid <> 'Order ID';


--Select the customer account numbers for all the orders that were placed in February.
SELECT product, price
FROM BIT_DB.JanSales
WHERE length (orderid) = 6 AND orderid <> 'Order ID'
ORDER BY price asc
LIMIT 1;

--Which product was the cheapest one sold in January, and what was the price?
SELECT Product, sum(Quantity)*price AS revenue
FROM BIT_DB.JanSales 
WHERE length (orderid) = 6 AND orderid <> 'Order ID'
GROUP BY Product;


--What is the total revenue for each product sold in January?
SELECT Product, SUM(Quantity), SUM(Quantity)*Price AS Total_Revenue
FROM BIT_DB.FebSales
WHERE  location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;


--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT COUNT (distinct acctnum), avg(quantity*price)
FROM BIT_DB.FebSales f
LEFT JOIN BIT_DB.customers c
ON f.orderid = c.order_id
WHERE f.quantity > 2
AND length (orderid) = 6 AND orderid <> 'Order ID';


--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT
count(distinct cust.acctnum),
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6
AND orderid <> 'Order ID';

--Find the specific date and time 
SELECT location 
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';


--Find the specific date but any time
SELECT sum(quantity)
FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%';


-- Find the date between two dates range
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

--How many of each type of headphone were sold in February? What is the sum of the quantity of products sold that have "headphones" in the name from the February dataset? Group the results by product.
SELECT Product, SUM(quantity) AS Total
FROM BIT_DB.FebSales
WHERE Product LIKE '%headphones%'
AND length (orderid) = 6 AND orderid <> 'Order ID'
GROUP BY Product;


--What was the average amount spent per account in February? What is the average amount spent / numbers of accounts, not the amount spent by each account.
SELECT AVG(quantity*price) AS Avg_spent
FROM BIT_DB.FebSales f
LEFT JOIN BIT_DB.customers c
ON f.orderID = c.order_id
WHERE length (orderid) = 6 AND orderid <> 'Order ID';


--Find order ids from Geogia (GA) where the order has an average price greater than $1,000. Only find orders from dates beginning with '04/1'. Assume that the dates are stored in the MM/DD/YY HH:MM format. 
SELECT orderID, AVG(price)
FROM AprSales
WHERE location LIKE '%GA%' 
AND orderdate LIKE '04/1%'
AND length (orderid) = 6 AND orderid <> 'Order ID'
Group by orderID
Having avg(price) > 1000;


--You've been given the following results from the MaySales table. Can you reverse engineer a SQL query that returns these results? 
SELECT location, orderID
FROM MaySales
WHERE orderID LIKE '1943_5'
AND length (orderid) = 6 AND orderid <> 'Order ID'
ORDER BY orderID
LIMIT 10;


--Which product brought in the most revenue in January and how much revenue did it bring in total? Show the one product that generated the most revenue (revenue being equivalent to quantity of an item multiplied by the item's price. 
SELECT product, SUM(quantity*price) AS Rev
FROM JanSales
GROUP BY product
ORDER BY SUM(quantity*price) desc
LIMIT 1;
